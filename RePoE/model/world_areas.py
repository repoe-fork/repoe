# generated by datamodel-codegen:
#   filename:  world_areas.schema.json

from __future__ import annotations

from typing import Dict, List, Optional

from pydantic import BaseModel, ConfigDict, RootModel


class AdditionalMonster(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    count: int


class Monster(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    flag: bool
    weight: int


class Topology(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    file: str
    id: str


class Pack(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    additional_monsters: Optional[Dict[str, AdditionalMonster]] = None
    boss_chance: int
    boss_count: int
    boss_monster_spawn_chance: Optional[int] = None
    boss_monsters: List[str]
    id: str
    max_count: int
    min_count: int
    monsters: Dict[str, Monster]
    tags: List[str]
    formation: Optional[str] = None


class WorldAreasSchemaValue(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    act: int
    area_level: int
    area_mods: List[str]
    bosses: List[str]
    connections: List[str]
    environment: Optional[str] = None
    has_waypoint: bool
    id: str
    is_town: bool
    loading_screens: List[str]
    name: str
    tags: List[str]
    topologies: Optional[List[Topology]] = None
    area_type_tags: Optional[List[str]] = None
    parent_town: Optional[str] = None
    packs: Optional[List[Pack]] = None
    terrain_plugins: Optional[str] = None


class Model(RootModel[Optional[Dict[str, WorldAreasSchemaValue]]]):
    root: Optional[Dict[str, WorldAreasSchemaValue]] = None
